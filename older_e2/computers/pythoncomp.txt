#NEG-OS
import math
print("NEGGA-COMPUTER INITIALIZED")
Command=[1,1,2003,    
         1,2,666,
         3,742617000028,74217000029,
         1,3,742617000027,
         27,0,742617000030,
         6,0,0,
         0,0,0,
         0,0,0,
         0,0,0]
End=0
Pos=0
Mem=[0,0,0,0,0,0,
     0,0,0,15," ",0,
     15,"NEGGA-OS 0.1 RUNNING",0,15," ",0,
     15,"ENTER PROGRAM TO RUN",0,15,"ENTER ZERO TO EXIT",0,
     13,1,0,18,742617000029,0,
     10,742617000027,9,12,742617000029,0,
     16,15,0,6,0,0,
     0,0,0,0,0,0,
     0,0,0,0,0,0,
     0,0,0,0,0,0,
     0,0,0,0,0,0,
     0,0,0,0,0,0,
     0,0,0,0,0,0,
     0,0,0,0,0,0,
     0,0,0,0,0,0,
     0,0,0,0,0,0,]
Output=[0,0,0,0]
Op=0
Cmd=0
Arg1=0
Arg2=0
Pcount=0
Sub=0
SubC=0
CmdReg=[0,0,0]
InstDone=0
Exec=0
BootP=0
Boot=0
BP=0
print("##########################################")
print("############# NEGGA-BIOS 1.0 #############")
print("##########################################")
print("COMMANDS - TYPE HELP TO SEE AGAIN")
print("E - EXEC PROGRAM DISK")
print("B - BOOT FROM MEMORY") #start at Addr 1
print("L - LIST ADDR X TO X+12")
print("W - WRITE TO ADDR")
print("X - SHUT DOWN")
while End==0 :
    print(" ")
    Input=raw_input("ENTER COMMAND: ")
    if Input=="E" or Input=="e" :
        Sub=0
        Pos=0
        Exec=1
    elif Input=="l" or Input=="L" :
        LAddr=int(input("ENTER ADDR (NUMBER!!): "))
        print("MEM",LAddr,"[",Mem[LAddr],"] ","MEM",LAddr+1,"[",Mem[LAddr+1],"] ","MEM",LAddr+2,"[",Mem[LAddr+2],"]")
        print("MEM",LAddr+3,"[",Mem[LAddr+3],"] ","MEM",LAddr+4,"[",Mem[LAddr+4],"] ","MEM",LAddr+5,"[",Mem[LAddr+5],"]")
        print("MEM",LAddr+6,"[",Mem[LAddr+6],"] ","MEM",LAddr+7,"[",Mem[LAddr+7],"] ","MEM",LAddr+8,"[",Mem[LAddr+8],"]")
        print("MEM",LAddr+9,"[",Mem[LAddr+9],"] ","MEM",LAddr+10,"[",Mem[LAddr+10],"] ","MEM",LAddr+11,"[",Mem[LAddr+11],"]")
    elif Input=="B" or Input=="b" :
        print("ENTER ADDR TO BOOT FROM")
        BootP=int(input("ENTER ADDR (NUMBER!!): "))
        SubC=0
        Pos=0
        Boot=1
        Exec=1
    elif Input=="X" or Input=="x" :
        print("GOODBYE...")
        End=1
    else:
        print("####### INPUT ERROR OR HELP ######")
        print("COMMANDS - TYPE HELP TO SEE AGAIN")
        print("E - EXEC PROGRAM DISK")
        print("B - BOOT FROM MEMORY") #start at Addr 1
        print("L - LIST ADDR X TO X+12")
        print("W - WRITE TO ADDR")
        print("X - SHUT DOWN")

    while Exec==1:
        #print("     ")
        #print("POS ", Pos)
        if Sub==1:
        #    print("SUB ",Sub)
        #    print("SUBROUTINE LINE ", SubC)
            CmdReg[0]=Mem[SubC]
            CmdReg[1]=Mem[SubC+1]
            CmdReg[2]=Mem[SubC+2]
        elif Boot==0:
            CmdReg[0]=Command[Pos]
            CmdReg[1]=Command[Pos+1]
            CmdReg[2]=Command[Pos+2]
        elif Boot==1:
        #    print("BOOT ",BootP)
            CmdReg[0]=12
            CmdReg[1]=BootP
            CmdReg[2]=0
            #Boot=0
            BP=1
        Cmd=CmdReg[0]
        
        if CmdReg[1]==1 :
            Arg1=CmdReg[1]
        else :
            if CmdReg[1]==742617000027:
                Arg1=Op
            elif CmdReg[1]>742617000027 and Cmd!=1:
                Addr=CmdReg[1]-742617000027
                if Mem[Addr]>742617000027 :
                    AddrA=Mem[Addr]-742617000027
                    Arg1=Mem[AddrA]
                else :
                    Arg1=Mem[Addr]
                CmdReg[1]=Arg1
             #   print("READ1ADDR ",Addr, "DATA ", Arg1)
            elif CmdReg[1]>742617000027 and Cmd==1 :
                AddrC=CmdReg[1]-742617000027
                Arg1=Mem[AddrC]
                if Arg1>742617000027 :
                    print("ADDR REF ERROR")
                    Exec=0
                else :
                    CmdReg[1]=Arg1
            else :
                Arg1=CmdReg[1]

        if CmdReg[2]==1 :
            Arg2=CmdReg[2]
        else :
            if CmdReg[2]==742617000027:
                Arg2=Op
            elif CmdReg[2]>742617000027:
                Addr2=CmdReg[2]-742617000027
                if Mem[Addr2]==1 :
                    Arg2=Mem[Addr2]
                else :
                    if Mem[Addr2]>742617000027 :
                        AddrB=Mem[Addr2]-742617000027
                        Arg2=Mem[AddrB]
                    else :
                        Arg2=Mem[Addr2]
                CmdReg[2]=Arg2
                #print("READ2ADDR ",Addr2, "DATA ", Arg2)
            else :
                    Arg2=CmdReg[2]
                    
        #print("CMDREG ", CmdReg)


        if Cmd!=0 and Cmd!=1 and Cmd!=27 and Cmd!=6 and Cmd!=10 and Cmd!=11 and Cmd!=12 and Cmd!=16 and Cmd!=26:
            CPUon=1
        else:
            CPUon=0
           # if Cmd==0: #SKIP
            #    Pos=Pos+3
            if Cmd==1: #SET
                Mem[Arg1]=Arg2
                if Sub==1 :
                    SubC=SubC+3
                else :
                    Pos=Pos+3
            elif Cmd==6: #END
                if Sub==1 and BP==1 :
                    Pos=Pos+3
                    Sub=0
                    BP=0
                    Exec=0
                    CmdReg=[0,0,0]
                    print(" ")
                    print("PROGRAM END")
                    print(" ")
                    print("OUTPUT 1", Output[0])
                    print("OUTPUT 2", Output[1])
                    print("OUTPUT 3", Output[2])
                    print("OUTPUT 4", Output[3])
                elif Sub==1 :
                    Pos=Pos+3
                    Sub=0
                    CmdReg=[0,0,0]
                elif Boot==1:
                    Boot=0
                    BootP=0
                    Exec=0
                    CmdReg=[0,0,0]
 #                   print(" ")
 #                   print("PROGRAM END")
 #                   print(" ")
 #                   print("OUTPUT 1", Output[0])
 #                   print("OUTPUT 2", Output[1])
 #                   print("OUTPUT 3", Output[2])
 #                   print("OUTPUT 4", Output[3])
                else :
                    Exec=0
                    CmdReg=[0,0,0]
                    print(" ")
                    print("PROGRAM END")
                    print(" ")
                    print("OUTPUT 1", Output[0])
                    print("OUTPUT 2", Output[1])
                    print("OUTPUT 3", Output[2])
                    print("OUTPUT 4", Output[3])
            elif Cmd==10: #CONDITIONAL SHIFT
                if Arg1>=1:
                    if Sub==1 :
                        SubC=Arg1
                    else :
                        Pos=Arg1
                else:
                    if Sub==1 :
                        SubC=SubC+3
                    else :
                        Pos=Pos+3
            elif Cmd==16: #SHIFT
                if Sub==1 :
                    SubC=Arg1
                else :
                    Pos=Arg1
            elif Cmd==12 : #RUN PROGRAM
                if Mem[Arg1]==0 :
                    print("ERROR: NO PROGRAM AT ADDRESS")
                    BootP=0
                    Boot=0
                    SubC=SubC+3
                    #Exec=0
                    BP=0
                else :
                    Sub=1
                    CmdReg[0]=Mem[Arg1]
                    CmdReg[1]=Mem[Arg1+1]
                    CmdReg[2]=Mem[Arg1+2]
                    SubC=Arg1
                    print("BOOTING PROGRAM ", SubC)
            #    print("CMDREG ", CmdReg)
            elif Cmd==11 : #INSTALL
                Pend=Arg2*3
            #    print("PROGRAM END ADDR ", Pend)
                Pcount=3
                print("INSTALLING PROGRAM")
                while InstDone==0:
                    WrAddr=Arg1+(Pcount-3)
                    print("INSTALL ADDR ", WrAddr)
                    Mem[WrAddr]=Command[Pcount]
                    Mem[WrAddr+1]=Command[Pcount+1]
                    Mem[WrAddr+2]=Command[Pcount+2]
                    if Pcount<Pend :
                        Pcount=Pcount+3
                    elif Pcount==Pend:
                        InstDone=1
                print("PROGRAM INSTALLED")
                Pos=Pcount+3
            elif Cmd==26 : #CLEAR
                Mem[Arg1]=0
                if Sub==1 :
                    SubC=SubC+3
                else :
                    Pos=Pos+3
            elif Cmd==27 : #OUTPUT
                Output[Arg1]=Arg2
                if Sub==1 :
                    SubC=SubC+3
                else :
                    Pos=Pos+3
            else:
                print("COMMAND ERROR")
                Boot=0
                Exec=0
                BootP=0

        if CPUon==1:
            if Cmd==2: #ADD
                Op=Arg1+Arg2
            #    print("OP ", Op)
                if Sub==1 :
                    SubC=SubC+3
                else :
                    Pos=Pos+3
            elif Cmd==3: #SUB
                Op=Arg1-Arg2
            #    print("OP ", Op)
                if Sub==1 :
                    SubC=SubC+3
                else :
                    Pos=Pos+3
            elif Cmd==4: #MULT
                Op=Arg1*Arg2
            #    print("OP ", Op)
                if Op>742617000026 :
                    print("NUMBER OVERFLOW")
                    Op=742617000026
                if Sub==1 :
                    SubC=SubC+3
                else :
                    Pos=Pos+3
            elif Cmd==5: #DIVIDE
                Op=Arg1/Arg2
           #     print("OP ", Op)
                if Op>742617000026 :
                    print("NUMBER OVERFLOW")
                    Op=742617000026
                if Sub==1 :
                    SubC=SubC+3
                else :
                    Pos=Pos+3
            elif Cmd==7: #BIGGER THAN
                if Arg1>Arg2:
                    Op=1
                else :
                    Op=0
                if Sub==1 :
                    SubC=SubC+3
                else :
                    Pos=Pos+3
            elif Cmd==8: #SMALLER THAN
                if Arg1<Arg2:
                    Op=1
                else :
                    Op=0
                if Sub==1 :
                    SubC=SubC+3
                else :
                    Pos=Pos+3
            elif Cmd==9: #EQUAL
                if Arg1==Arg2:
                    Op=1
                else :
                    Op=0
                if Sub==1 :
                    SubC=SubC+3
                else :
                    Pos=Pos+3
            elif Cmd==13 : #INPUT NUM TO ADDR X
                In=int(input("ENTER VALUE "))
                Mem[Arg1]=In
                Op=In
                if Sub==1 :
                    SubC=SubC+3
                else :
                    Pos=Pos+3
            elif Cmd==14 : #INPUT STRING TO ADDR X
                In=raw_input("ENTER TEXT ")
                Mem[Arg1]=In
                Op=In
                if Sub==1 :
                    SubC=SubC+3
                else :
                    Pos=Pos+3
            elif Cmd==15 : #PRINT
                if Arg1==1 :
                    print("-",Arg1)
                else :
                    Print=Mem[Arg1]
                    print("-",Print)
                if Sub==1 :
                    SubC=SubC+3
                else :
                    Pos=Pos+3
            elif Cmd==17: #AND
                if Arg1>=1 and Arg2>=1:
                    Op=1
                else :
                    Op=0
                if Sub==1 :
                    SubC=SubC+3
                else :
                    Pos=Pos+3
            elif Cmd==18: #NOT
                if Arg1==0:
                    Op=1
                else :
                    Op=0
                if Sub==1 :
                    SubC=SubC+3
                else :
                    Pos=Pos+3
            elif Cmd==19: #NOT AND NOT
                if Arg1==0 and Arg2==0:
                    Op=1
                else :
                    Op=0
                if Sub==1 :
                    SubC=SubC+3
                else :
                    Pos=Pos+3
            elif Cmd==20: #OR
                if Arg1>=1 or Arg2>=1:
                    Op=1
                else :
                    Op=0
                if Sub==1 :
                    SubC=SubC+3
                else :
                    Pos=Pos+3
            elif Cmd==21: #EXP/SQR
                if Arg2==0 :
                    Op=Arg1^2
                else :
                    Op=Arg1^Arg2
                if Op>742617000026 :
                    print("NUMBER OVERFLOW")
                    Op=742617000026
                if Sub==1 :
                    SubC=SubC+3
                else :
                    Pos=Pos+3
            elif Cmd==22: #SQRT
                Op=math.sqrt(Arg1)
                if Sub==1 :
                    SubC=SubC+3
                else :
                    Pos=Pos+3
            elif Cmd==23: #COS
                Op=math.cos(Arg1)
                if Sub==1 :
                    SubC=SubC+3
                else :
                    Pos=Pos+3
            elif Cmd==24: #SIN
                Op=math.sin(Arg1)
                if Sub==1 :
                    SubC=SubC+3
                else :
                    Pos=Pos+3
            elif Cmd==25: #TAN
                Op=math.tan(Arg1)
                if Sub==1 :
                    SubC=SubC+3
                else :
                    Pos=Pos+3
            else:
                print("CPU ERROR")
                Exec=0
       # print("MEMORY ")
       # print(Mem[0],"-",Mem[1],"-",Mem[2],"-",Mem[3],"-",Mem[4],"-",Mem[5])
       # print(Mem[6],"-",Mem[7],"-",Mem[8],"-",Mem[9],"-",Mem[10],"-",Mem[11])
       # print(Mem[12],"-",Mem[13],"-",Mem[14],"-",Mem[15],"-",Mem[16],"-",Mem[17])
       # print(Mem[18],"-",Mem[19],"-",Mem[20],"-",Mem[21],"-",Mem[22],"-",Mem[23])
       # print(Mem[24],"-",Mem[25],"-",Mem[26],"-",Mem[27],"-",Mem[28],"-",Mem[29])
