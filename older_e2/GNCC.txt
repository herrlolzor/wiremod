@name gncc
@inputs Install Clk InData Verb N1 N2 N3 Reset Enter Mem:array
@outputs Done ProgramDone PAddr Output:array Int Mem:array
@outputs Command PrevOp Argument Argument2  Out #X Y AddrRead AddrRead2 AddrWrite Arg Arg2
@persist Command Arg Arg2 PAddr PrevOp Int RAM:array #LPP InstC InstL
@persist ProgramDone Output:array Done UsrCmd Vreg:array
@trigger Clk Reset Enter Install Verb N1 N2 N3
#computer on a chip
#NEED REWORK JUMP
#version: stored program, onboard RAM
Code=742617000027
if (Install==1) {RAM=array(0,0,0,
    0,0,0,
    0,0,0,
    1,1,40,
    1,2,100,
    17,(Code+1),0,
    1,3,(Code),
    18,(Code+1),0,
    1,4,(Code),
    12,(Code+2),(Code+3),
    1,5,(Code),
    12,(Code+2),(Code+4),
    1,6,Code,
    2,(Code+7),(Code+5),
    1,7,Code,
    2,(Code+8),(Code+6),
    1,8,Code,
    22,1,(Code+7),
    22,2,(Code+8),
    2,(Code+9),1,
    27,(Code+9),100,
    10,742617000027,7,
    11,0,0,
    1,1,1,
    10,742617000027,71
)}

if (Reset==1) {PAddr=Done=Command=Arg=Arg2=ProgramDone=Argument=Argument2=0
Vreg=array()}
    
if ($Verb) {Vreg[0,number]=InData}
elseif ($N1) {Vreg[1,number]=InData}
elseif ($N2) {Vreg[2,number]=InData}
elseif ($N3) {Vreg[3,number]=InData}
VArg=Vreg[0,number]=InData
Nn1=Vreg[1,number]=InData
Nn2=Vreg[2,number]=InData
Nn3=Vreg[3,number]=InData
if (VArg==1) {exit()}
elseif (VArg==2) {PAddr=Nn1
    Newprog=1
    ProgramDone=0
    Done=0}
elseif (VArg==3) {exit()}
elseif (VArg==4) {
    UsrCmd=1
    Newprog=0
    Command=Nn1
    Arg=Nn2
    Arg2=Nn3
}
##BEGIN HERE
if (Clk==1 & ProgramDone==0) {if (Done==1) {Done=0}
if (Newprog==0 & UsrCmd==0) {
    Command=RAM[PAddr,number]
    Arg=RAM[PAddr+1,number]
    Arg2=RAM[PAddr+2,number]
}
elseif (UsrCmd==0) {Command=RAM[PAddr,number]
    Arg=RAM[PAddr+1,number]
    Arg2=RAM[PAddr+2,number]
    Newprog=0}


if (Command!=0 & Command!=1 & Command!=11 & Command!=21 & Command!=20 & Command!=21 & Command!=22 & Command!=23 & Command!=25) {
    if (Command!=10) {ALUOn=1}
    #arg1
    if (Arg>Code) { #RAM Call
    AddrRead=Arg-Code
    Argument=RAM[AddrRead,number]}
    elseif (Arg==Code) {Argument=PrevOp} #Last Op Call
    else {Argument=Arg #Normal Argument
        }
    
    #arg2
    if (Arg2>Code) {    #RAM Call
    AddrRead2=Arg2-Code
    Argument2=RAM[AddrRead2,number]}
    elseif (Arg2==Code) {Argument2=PrevOp}   #Last Op Call
    else {Argument2=Arg2    #Normal Argument
        }

}
elseif (PAddr!=0) {ALUOn=0
    if (Command==1) {   ###Set RAM Command
        if (Arg2==Code) {Argument2=PrevOp}
        elseif (Arg2>Code) {    #RAM Call
        AddrRead=Arg2-Code
        Argument2=RAM[AddrRead,number]}
        else {Argument2=Arg2}
        
        Argument=Arg
        RAM[Argument,number]=Argument2
        PrevOp=Argument2
        }
    if (Command==24) {   ###Set Mem Command
        if (Arg2==Code) {Argument2=PrevOp}
        elseif (Arg2>Code) {    #RAM Call
        AddrRead=Arg2-Code
        Argument2=RAM[AddrRead,number]}
        else {Argument2=Arg2}
        
        Argument=Arg
        Mem[Argument,number]=Argument2
        PrevOp=Argument2
        }
    elseif (Command==23) { ###Setlop
        WrAddr=Arg-Code
        RAM[WrAddr,number]=PrevOp
        }
    elseif (Command==25) { #Clear
        WrAddr=Arg-Code
        RAM[WrAddr,number]=0}
    elseif (Command==22) { ###Set Out
        if (Arg2==Code) {Argument2=PrevOp}
        elseif (Arg2>Code) {    ###RAM Call
        AddrRead=Arg2-Code
        Argument2=RAM[AddrRead,number]}
        else {Argument2=Arg2}
        Output[Arg,number]=Argument2}
    elseif (Command==11) {ProgramDone=1}
    elseif (Command==10) {
        if (Arg2==Code) {Argument2=PrevOp}
        elseif (Arg2>Code) {    ###RAM Call
        AddrRead=Arg2-Code
        Argument2=RAM[AddrRead,number]}
        else {Argument2=Arg2}
        }
    Done=1
} 
if ((Command==10 & Arg>=1) | (Command==20)) {ALUOn=0
    if (Command==10) {PAddr=Argument2}
    else {PAddr=Argument2}
    Done=1
    exit()
    }
elseif (Command==10 & Argument<=0) {ALUOn=0
Done=1}
if (ALUOn==1) {
    if (Argument==Code) {Argument=PrevOp} #Last Op Call
    elseif (Argument>Code) { #RAM Call
    AddrRead=Argument-Code
    Argument=RAM[AddrRead,number]}
    
    #arg2
    if (Argument2==Code) {Argument2=PrevOp}   #Last Op Call
    elseif (Argument2>Code) {    #RAM Call
    AddrRead2=Argument2-Code
    Argument2=RAM[AddrRead2,number]}
    X=Argument
    Y=Argument2

    if (Command==2) {Out=X+Y
       PrevOp=Out
        Done=1}
        
    elseif (Command==3) {Out=X-Y
       PrevOp=Out
        Done=1}
        
    elseif (Command==4) {
    if (X==Y) {Out=1
       PrevOp=1
            Done=1}
    else {Out=0
       PrevOp=0
            Done=1}
            }
            
    elseif (Command==5) {
    if (X>=Y) {Out=1
       PrevOp=1
        Done=1}
    else {Out=0
       PrevOp=0
        Done=1}
    }
    
    elseif (Command==6) {
    if (X<=Y) {Out=1
       PrevOp=1
        Done=1}
    else {Out=0
       PrevOp=0
        Done=1}
    }
    
    elseif (Command==7) {
    if (X==1 & Y==1) {Out=1
       PrevOp=1
        Done=1}
    else {Out=0
       PrevOp=0
        Done=1}
    }
    
    elseif (Command==8) {
    if (X==1 | Y==1) {Out=1
       PrevOp=1
        Done=1}
    else {Out=0 
       PrevOp=0   
        Done=1}
    }
    
    elseif (Command==9) {
    if (X==0 & Y==0) {Out=1
       PrevOp=1
        Done=1}
    else {Out=0  
       PrevOp=0  
        Done=1}
    }

    elseif (Command==12) {
       Out=X*Y
       PrevOp=Out
        Done=1
    }

    elseif (Command==13) {
       Out=X/Y
       PrevOp=Out
        Done=1
    }

    elseif (Command==14) {
       Out=(X^Y)
       PrevOp=Out
        Done=1
    }

    elseif (Command==15) {
       Out=sqrt(X)
       PrevOp=Out
        Done=1
    }
#elseif (Command==16) {
#       Out=X^2
#       PrevOp=Out
#        Done=1
#    }
    elseif (Command==17) {
       Out=cos(X)
       PrevOp=Out
        Done=1
    }
    elseif (Command==18) {
       Out=sin(X)
       PrevOp=Out
        Done=1
    }
    elseif (Command==19) {
    if (X!=Y) {Out=1
       PrevOp=1
        Done=1}
    else {Out=0  
       PrevOp=0  
        Done=1}
    }
    elseif (Command==26) {
    if (X>Y) {Out=1
       PrevOp=1
        Done=1}
    else {Out=0
       PrevOp=0
        Done=1}
    }
    elseif (Command==27) {
    if (X<Y) {Out=1
       PrevOp=1
        Done=1}
    else {Out=0
       PrevOp=0
        Done=1}
    }
}
if (Done==0) {Done=1}
if (Clk==1 & PAddr>=1 & Done==1 & ProgramDone==0 & UsrCmd==0) {PAddr=PAddr+3}
elseif (UsrCmd==1 & Done==1) {UsrCmd=0
    ProgramDone=1}
}

