@name MK1 VSSS Torpedo
@inputs Screen:wirelink InitialDir:vector WaterLevel AttackMode# 1 = surface attack, 2 = submerged attack
@outputs Thrust Detonate 
@persist Dir:vector Roll Angle AngVel:angle Axis:vector TargetDir:vector Timer
@persist AverageX AverageY TargetLock #seeker
@persist TickRate E:entity XTorque YTorque ZTorque DetTimer
@persist Resolution Range Ranger:ranger RangerX RangerY RangerZ ScreenX ScreenY ScreenCell Iterations # seeker
@persist [RangerDir Colour]:vector # seeker
@persist [TargetXArray TargetYArray]:array TargetPriority TargetRank Fov# seeker
@persist SeekerWidth SeekerHeight # fov stuff
@trigger 
@model models/props_phx/ww2bomb.mdl
if (first() | duped()) {
    TickRate = 66.566669
    E = entity()
    E:setColor(45, 60, 45, 255)
    #####seeker#####
    Resolution = 441 # odd square number
    Range = 10000 # ranger range
    ScreenCell = 3
    TargetPriority = TargetRank = 7
    #####seeker#####
    exit()
    }
if (~AttackMode) {
    if (AttackMode == 1) {
        Fov = 55 #degrees 
        SeekerWidth = sqrt(Resolution) * 3
        SeekerHeight = sqrt(Resolution) / 3
    }
    elseif (AttackMode == 2) {
        Fov = 50 #degrees
        SeekerWidth = sqrt(Resolution)
        SeekerHeight = sqrt(Resolution)
    }
    Screen[1048574] = 1 # clear screen 
    Screen[1048572] = SeekerWidth
    Screen[1048573] = SeekerWidth
    Screen[1048569] = 1 # vector rgb colourmode
    RangerX = int(SeekerWidth / 2)
    RangerY = int(-SeekerHeight / 2)
    RangerZ = RangerX / tan(Fov / 2)
}
if (AttackMode) {
    runOnTick(1)
    Thrust = 1
    Timer++
    Dir = E:angles():forward()
    if (AttackMode == 1) {
        if (Timer == 1) {TargetDir = Dir} 
        elseif (Timer > 100 & !TargetLock) {TargetDir = Dir:setZ(clamp((WaterLevel - 300 - E:pos():z()) / 1500, -0.5, 0.5)):normalized()} 
        # after 300 ticks pitch to get to cruise depth of 50 then level out
    } elseif (AttackMode == 2) {
    if (Timer == 1) {TargetDir = Dir} 
    #elseif (Timer == 200 & InitialDir) {TargetDir = InitialDir} # after 200 go to user inputted bearing
    #elseif (Timer > 800) {TargetDir = } # spiral search pattern
    }
    if (Timer > 300 & perf()) { # arm seeker system #############################################################
        
      
        for (Iterations = 0, 20) {
            RangerDir = E:toWorldAxis(vec(RangerZ, RangerX, -RangerY):normalized())
            Ranger = rangerOffset(Range, entity():toWorld(vec(32, 0, 5.95)), RangerDir)
                
            ############ Target priorities ##################
            if (!Ranger:entity() | Ranger:position():z() > WaterLevel) {TargetPriority = 7, Colour = vec(0, 0, 0)} # ignore if ranger is hitting nothing or something above the water
            elseif (Ranger:entity():isPlayer()) {TargetPriority = 4, Colour = vec(0, 255, 0)}
            elseif (Ranger:entity():isFrozen()) {TargetPriority = 6, Colour = vec(100, 100, 100)}
            elseif (Ranger:entity():isConstrained()) { 
                TargetPriority = 2, Colour = vec(255, 0, 255)
                if (Ranger:entity():vel()) {TargetPriority = 1, Colour = vec(255, 0, 0)}# should check if vel is less than torpedo vel?
            } 
            elseif (Ranger:entity():vel()) {TargetPriority = 3, Colour = vec(255, 100, 100)}
            else {TargetPriority = 5, Colour = vec(255, 255, 255)}
            
            if (TargetPriority == TargetRank & TargetPriority != 7) {
                TargetXArray:pushNumber(ScreenX)# save x value to TargetXArray
                TargetYArray:pushNumber(ScreenY)# save y value to TargetYArray
            } elseif (TargetPriority < TargetRank) {
                TargetRank = TargetPriority
                TargetXArray = array()
                TargetYArray = array()
                TargetXArray:pushNumber(ScreenX)# save x value to TargetXArray
                TargetYArray:pushNumber(ScreenY)# save y value to TargetYArray
            }
            #################################################
            Screen[ScreenCell, vector] = Colour
        
            RangerX--
            ScreenX++
            if (RangerX < -SeekerWidth / 2) {
            RangerX = int(SeekerWidth / 2)
            ScreenX = 0
            RangerY++
            ScreenY++
            }
            if (RangerY > SeekerHeight / 2) {
            RangerX = int(SeekerWidth / 2)
            RangerY = int(-SeekerHeight / 2)
            ScreenX = ScreenY = 0
            if (TargetXArray:count()) {
                TargetLock = 1
                AverageX = round(TargetXArray:average())
                AverageY = round(TargetYArray:average())
                Screen[(AverageX + SeekerWidth * AverageY) * 3, vector] = vec(0, 0, 255) # target point is blue
                TargetDir = E:toWorldAxis(vec(RangerZ, -(AverageX - SeekerWidth / 2) , -(AverageY - SeekerHeight / 2)):normalized())
            } else {TargetLock = 0}
        
            TargetPriority = TargetRank = 7 # where 7 is lowest priority
            TargetXArray = array()
            TargetYArray = array()
            }
            ScreenCell = (ScreenX + SeekerWidth * ScreenY) * 3 
        }
        if (findInSphere(E:pos(), 100) > 3) {Detonate = 1}# detonate when there are more entities than just the torpedo
    }##################################################################################################
    ######### guidance control ###########
    Angle = acos(Dir:dot(TargetDir))
    Axis = E:toLocalAxis(Dir:cross(TargetDir):normalized())
        
    AngVel = E:angVel()
    XTorque = (-E:angles():roll() - AngVel:roll() * 0.4) * 4000
    YTorque = Angle * Axis:y() * 120000 - AngVel:pitch() * 105000
    ZTorque = Angle * Axis:z() * 120000 - AngVel:yaw() * 105000
    
    E:applyTorque(vec(XTorque, YTorque, ZTorque) / TickRate) # guidance physics
}
if (Detonate) {
    DetTimer++
    if (DetTimer > 30) {selfDestructAll()}
    }

# made by Tolyzor, released @ the wiremod forums.

# Please feel free to use part or all of the guidance control code,
# note for non-submerged aplications the constants will need reducing by 100x or so

# At this time I would rather not have the video-scanning-seeker or target priority code modified or used elsewhere
# as it is still very much a work in progress (hence the messyness of the code).
# I shall release an optimised version which I'd be happy to share in the future.

