@name crypto breaker1
@inputs Go In:string Crib:string Reset
@outputs Out:string Fail Test:string Broken Breaking Try InLetter:string Key
@persist Msg:string Broken Breaking Try Tries:table Count Test:string Fail Key
@trigger Go Reset
if (Reset==1) {reset()}

if (Breaking==1) {I=1}
else {I= 1000}
interval(I)

C=table(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26)
if (Go==1) {Breaking=1
    Count=1
    Try=1
    Fail=0
    Msg=In+"."
    }

if (Breaking==1) {
    InLetter=Msg:sub(Count,Count)
    if (InLetter=="A") {L=1}
    elseif (InLetter=="B") {L=2}
    elseif (InLetter=="C") {L=3}
    elseif (InLetter=="D") {L=4}
    elseif (InLetter=="E") {L=5}
    elseif (InLetter=="F") {L=6}
    elseif (InLetter=="G") {L=7}
    elseif (InLetter=="H") {L=8}
    elseif (InLetter=="I") {L=9}
    elseif (InLetter=="J") {L=10}
    elseif (InLetter=="K") {L=11}
    elseif (InLetter=="L") {L=12}
    elseif (InLetter=="M") {L=13}
    elseif (InLetter=="N") {L=14}
    elseif (InLetter=="O") {L=15}
    elseif (InLetter=="P") {L=16}
    elseif (InLetter=="Q") {L=17}
    elseif (InLetter=="R") {L=18}
    elseif (InLetter=="S") {L=19}
    elseif (InLetter=="T") {L=20}
    elseif (InLetter=="U") {L=21}
    elseif (InLetter=="V") {L=22}
    elseif (InLetter=="W") {L=23}
    elseif (InLetter=="X") {L=24}
    elseif (InLetter=="Y") {L=25}
    elseif (InLetter=="Z") {L=26}
    elseif (InLetter==".") {Tries[Try,string]=Test
        if (Broken==1) {Out=Test
        Breaking=0
        Key=Try}
        else {Test=""
        Try=Try+1
        Count=1}
        exit()}
    C2=L+Try
    OutLetter=C[C2,number]
    if (OutLetter==1) {S="A"}
    elseif (OutLetter==2) {S="B"}
    elseif (OutLetter==3) {S="C"}
    elseif (OutLetter==4) {S="D"}
    elseif (OutLetter==5) {S="E"}
    elseif (OutLetter==6) {S="F"}
    elseif (OutLetter==7) {S="G"}
    elseif (OutLetter==8) {S="H"}
    elseif (OutLetter==9) {S="I"}
    elseif (OutLetter==10) {S="J"}
    elseif (OutLetter==11) {S="K"}
    elseif (OutLetter==12) {S="L"}
    elseif (OutLetter==13) {S="M"}
    elseif (OutLetter==14) {S="N"}
    elseif (OutLetter==15) {S="O"}
    elseif (OutLetter==16) {S="P"}
    elseif (OutLetter==17) {S="Q"}
    elseif (OutLetter==18) {S="R"}
    elseif (OutLetter==19) {S="S"}
    elseif (OutLetter==20) {S="T"}
    elseif (OutLetter==21) {S="U"}
    elseif (OutLetter==22) {S="V"}
    elseif (OutLetter==23) {S="W"}
    elseif (OutLetter==24) {S="X"}
    elseif (OutLetter==25) {S="Y"}
    elseif (OutLetter==26) {S="Z"}
    Test=Test+S
    Count=Count+1
    if (Count>26) {Fail=1
        Breaking=0
    Count=1
    Key=0}
    Find=Test:find(Crib)
    if (Find!=0) {Broken=1}
}
