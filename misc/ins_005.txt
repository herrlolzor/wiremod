@name INS 005 by the Baron Von Lolzor 
@inputs AddrRead AddrWrite DataX DataY DataZ Clk Reset Alt 
@outputs X Y Z Knots Speed Dist Go Hit
@persist Go GPS:vector Gx Py Sz Ram1:array Ram2:array Ram3:array

if (~Clk & Clk) {Ram1[AddrWrite,number] = DataX}
if (~Reset & Reset) {Ram1=array()}
OutX=Ram1[AddrRead,number]
if (~Clk & Clk) {Ram2[AddrWrite,number] = DataY}
if (~Reset & Reset) {Ram2=array()}
OutY=Ram2[AddrRead,number]
if (~Clk & Clk) {Ram3[AddrWrite,number] = DataZ}
if (~Reset & Reset) {Ram3=array()}
OutZ=Ram3[AddrRead,number]


interval(100)
Go=AddrRead <= 5   # NUMBER OF WAYPOINTS TO BE FLOWN
GPS=entity():pos()
Gx=GPS:x()
Py=GPS:y()
Sz=GPS:z()
X=Gx - OutX
Y=Py - OutY
Z=Sz - OutZ - Alt  #Dont forget to set altitude!
Dist=X + Y + Z # ESTIMATED DISTANCE
Knots=toUnit("knots", entity():vel():length() )
Speed=entity():vel():length()
if (Dist < 500) {Hit=1}    # Here starts the Waypoint trigger
elseif (Dist > -500) {Hit=1}
if (Dist >500) {Hit=0}
if (Dist <-500) {Hit=0}

# AddRead must be wired to an Up/Down counter gate, Wich the Increment is wired to Hit.
# AddWrite must be wired to the device wich will feed it the Waypoints GPS parameters; by 4-channel radio.
# DataX,Y and Z must be wired to a rdio; the parameters are fed via the 3 last channels.
# Alt is wired to a constant value or advanced input to feed the Altitude of flight. Important.
# X,Y,Z is for vector thrusters
# Outputs Knots, Speed and Dist are simply for information
# A relay is wired to Go with an advanced input, to send it off. Thruster's Mult variables are wired to Go
