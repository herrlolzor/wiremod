@name map data input
@inputs X Y Go Data Reset
@outputs AddrX AddrY Elev:array Done Time PX
@persist Elev:array Map:table Time On
@trigger 
interval(250)
PX=round((X/500))+30
PY=round((Y/500))+30
Vec=vec(PX,PY,0)
Map[1,vector]=vec(-2,-2,0)+Vec
Map[2,vector]=vec(-1,-2,0)+Vec
Map[3,vector]=vec(0,-2,0)+Vec
Map[4,vector]=vec(1,-2,0)+Vec
Map[5,vector]=vec(2,-2,0)+Vec
Map[6,vector]=vec(-2,-1,0)+Vec
Map[7,vector]=vec(-1,-1,0)+Vec
Map[8,vector]=vec(0,-1,0)+Vec
Map[9,vector]=vec(1,-1,0)+Vec
Map[10,vector]=vec(2,-1,0)+Vec
Map[11,vector]=vec(-2,0,0)+Vec
Map[12,vector]=vec(-1,0,0)+Vec
Map[13,vector]=vec(0,0,0)+Vec
Map[14,vector]=vec(1,0,0)+Vec
Map[15,vector]=vec(2,0,0)+Vec
Map[16,vector]=vec(-2,1,0)+Vec
Map[17,vector]=vec(-1,1,0)+Vec
Map[18,vector]=vec(0,1,0)+Vec
Map[19,vector]=vec(1,1,0)+Vec
Map[20,vector]=vec(2,1,0)+Vec
Map[21,vector]=vec(-2,2,0)+Vec
Map[22,vector]=vec(-1,2,0)+Vec
Map[23,vector]=vec(0,2,0)+Vec
Map[24,vector]=vec(1,2,0)+Vec
Map[25,vector]=vec(2,2,0)+Vec

if (Go==1 & Time<=25) {
    On=1
    Time=Time+1
    AddrX=Map[Time,vector]:x()
    AddrY=Map[Time,vector]:y()
    Elev[Time,number]=Data
}
if (Time>25) {On=0
Done=1}
else {Done=0}

if (Reset==1) {Time=0
Elev=array()
}
