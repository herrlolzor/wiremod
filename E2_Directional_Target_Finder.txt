@name E2 Directional Target Finder
@inputs On Index OnlyPlayers OnlyNPCs ExcludePlayerProps ExcludePlayer ExcludeProps Reset
@outputs Results Entity:entity ID Distance Type:string Model:string Position:vector Velocity:vector 
@outputs IsPlayer IsNPC IsVehicle
@persist 
@trigger 
Ind=Index+1
if (Reset) {reset()}
if (first()) {
    findExcludeClass("beam")
    findExcludeClass("point_spotlight")
    findExcludeClass("spotlight_end")
    findExcludeClass("func_button")
    findExcludeClass("func_door")
    findExcludeClass("path_track")
    findExcludeClass("lua_run")
    findExcludeClass("path_corner")
    findExcludeClass("func_brush")
    findExcludeClass("npc_heli_avoidbox")
    findExcludeClass("ambient_generic")
    findExcludeClass("trigger_multiple")
    findExcludeClass("vehicle")
    findExcludeClass("gmod_camera")
    findExcludeClass("hologram")
    findExcludeClass("gmod_tool")
    findExcludeClass("pist_weapon")
    findExcludeClass("ammo")
    findExcludeModel("weapon")
}
if (On) {
    interval(10)
    E=entity()
    Owner=owner()
    Mypos=E:pos()
    Len=25000
    Deg=40
    Up=E:up()
    MyAng=E:angles()
    
    if (ExcludePlayer) {findExcludePlayer(Owner)}
    else {findIncludePlayer(Owner)}
    if (ExcludePlayerProps) {findExcludePlayerProps(Owner)}
    else {findIncludePlayerProps(Owner)}
    if (ExcludeProps) {
        findExcludeClass("prop")
        findExcludeClass("acf")
        findExcludeClass("wiremod")
        findExcludeClass("gmod_wire")}
    else {findIncludeClass("prop")}
    
    Results=findInCone(Mypos,Up,Len,Deg)
    F = findToArray()
    Entity = F[Ind,entity]
    IsPlayer = Entity:isPlayer()
    IsNPC = Entity:isNPC()
    IsVehicle = Entity:isVehicle()
    ID = Entity:id()
    Type = Entity:type()
    Model = Entity:model()
    Position = Entity:pos()
    Velocity = Entity:vel()
    Angles = Entity:angles()
    Distance = Mypos:distance(Position)
}
else{
    Entity = entity(0)
    IsPlayer = 0
    IsNPC = 0
    IsVehicle = 0
    ID = 0
    Type = ""
    Model = ""
    Position = vec()
    Velocity = vec()
    Angles = ang()
    Distance = inf()
    Results = 0
}
