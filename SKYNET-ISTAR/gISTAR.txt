NOTES
http://en.wikipedia.org/wiki/Quadtree










Ok here is something that is waaaay out there. This project of mine is extremely ambitious, i don't think it's ever been done before. You all remember the lopsided US victories in Afghanistan and Iraq. I'm talking about the conventionnal part, not the IED and Guerilla stuff. They where mostly made possible by never-seen-before abilities to share information on targets within a unit. Reports, for the first time, was instantly sent to higher commands and Intelligence was available instantly, to any unit with 'net' connection. A grunt could sent a SITREP and in fourty minutes an air strike was inbound (a process that took 3 days in the 1st Gulf War). My project is, in short, trying to create a simplified such a system of Target-Information Sharing. 

What this is is a two-way modular network of information sharing, in wich you could have a sensor feed data to any number of nodes wich can be weapon systems to destroy them. You have a simplistic threat level matrix to help tell seemingly harmless objects from dangers, this enables a priority system in wich the sensors at the bottom of the pyramid build a complete picture of the "Battlespace". This is a key concept. The Battlespace Picture (BP) is a kind of array in wich data on all threats are arranged in descending order. Each echelon of the pyramid establishes a BP that is sent up and merged into a bigger one, until at the end a great list of all threats in the region is available. From then it is easy to take out the most menacing ones with Special Assets that operate independently from the mass of the army, like aircraft, missiles, whatever you can think of.

From the top, a specialized process can process the greater picture to eleminate harmless objects from the BP, delete too old entries, ect, to make the list more relevant. It is then split again by sector (perhaps they where managed separately from the beginning) and sent down the chain of command to the units wich will have a prioritized targets list. The process of assigning priority to certain of threats is infinitely adaptable; and one could for example assign a special code that denotes that the information must be urgently "branched" to a certain type of unit (a Missile report to an Anti-Air unit, for example). Coding of threats and types is made necessary by the fact that we must differentiate between Air and Ground objects. 

From wikipedia, the definition of ISTAR
[quote]
ISTAR stands for Intelligence, Surveillance, Target Acquisition, and Reconnaissance. In its macroscopic sense, ISTAR is a practice that links several battlefield functions together to assist a combat force in employing its sensors and managing the information they gather.

Information is collected on the battlefield through systematic observation by deployed soldiers and a variety of electronic sensors. Surveillance, Target Acquisition and Reconnaissance are methods of obtaining this information. The information is then passed to intelligence personnel for analysis, and then to the commander and his staff for the formulation of battle plans. Intelligence is processed information that is relevant and contributes to an understanding of the ground, and of enemy dispositions and intents.

ISTAR is the process of integrating the intelligence process with surveillance, target acquisition and reconnaissance tasks in order to improve a commander’s situational awareness and consequently their decision making. The inclusion of  the "I" is important as it recognizes the importance of taking the information from all of the sensors and processing it into useful knowledge.
[/quote]

I originally envisonned this as one with another system of Command and Control, to indirectly control large numbers of units. However i saw that a C3ISR system (Command, Control, Communication, Intelligence, Surveillance, Reconnaissance) would be a freaking nightmare to code from scratch. So i split the two and decided to refine each of them turn by turn, since both are very similar in requirements. Basically, this is heavy on data handling, iterative analysis, table and array manipulation and analysis, Pipielining, Data flow and two-way communications. If i started with the C2 system, i would have a formation that is essentially fighting blind, unable to share information about targets, relying only on their onboard sensors. It is a clearly less desirable than a comprehensive C3-split-ISR system. But i'm still sketching out both systems jointly, to ensure an easy conversion and compatibility with the C3 system. C3, especially automated C3, requires some very tough design and heavy refinement, since you need an [url=http://en.wikipedia.org/wiki/OODA_Loop]OODA Loop[/url], a systematic doctrine and set of tactics, a working [url=http://en.wikipedia.org/wiki/Combat_operations_process]Combat Operation Process[/url] and much more... However with both together you can have something that is akin to a thinking, reacting intelligence (that only knows how to destroy and kill. Skynet.), a kind of Hive mind that extends to the lowest 'grunt'-unit. Kind of 'if one sees you, they all see you'. It can also react as a whole to determined conditions, like dispersing if missiles are detected incoming.

A few crucial concepts to keep in mind first:
1. The system's architecrure in on a base 4 number, wich means you have only multiples of 4. You always have 4 subnodes per node. If one goes away, it won't affect the working of the greater system. It's basically a quadtree. 
2. The system is hierarchical, wich means that if you destroy a Node it's sub-nodes will be cut off from the network. A fully cellular, Ad-Hoc network is waaaay too complicated and resource-heavy (as if all this was not enough)
3. It is largely automated. Only general directions need to be given in the way of prioritizing.
4. It is in as close to real-time as necessary. Time from bottom to top tier, analysis and managing, and back down to the lowest node should be less than five seconds
5. There are a total of 4 tiers of nodes, wich means a total of 64 sensor nodes (Yes, that means that any number of weapons or whatever can use any even number of sensors (1, 2, 4) per system,  so you could have much more than 64 weapons considering each sensor node can track 4 targets and has access to the updated Tier-0 Battlespace Picture
6. This is a bare-bones system with no advanced analysis or pattern recognition (ie: recognizing multiple constrained props a contraption)
7. Each Node is configured to be a kind of HQ/Communications Hub, they are vulnerable and high-value targets
8. Keeping to simplicity, information sharing/networking is pyramidal, information is passed down from HQ.

So yeah, here is a massive pile of ideas

DICTIONNARY
BP - Battlespace Picture (Array of Target Pos compiled by the Node)
Tier 0 - network of 4 Sensors
Tier 1 - network of 4 Tier 0 Nodes
Tier 2 - network of 4 Tier 1 Nodes
Tier 3 - network of 4 Tier 2 Nodes, "Master" Node
T0BP - Tier 0 Battlespace Picture
ect

PROBLEMS. HOW DO I...
Merge multiple locks to single target (ie: 16 props, 8 thrusters, 1 player in air vehicle = airplane... isConstrainedTo!)
Know when target is precisely destroyed if not an alive/destructible entity
Achtung Systempunkt!!
Quickly and securely transfer arrays by radio (done experimentally)


TGT DATA CODE STRING
[x0-"H"-x1-"I"-x2-"J"-x3-"K"-x4-"X"-xp-"Y"-yp-"Z"-zp]

H,I,J,K,X,Y,Z= Markers

X0=TgtID
x1=Threat Level
x2=Type
x3=Speed
X4=OStime of report
xp=X grid position
yp=Y grid position
zp=Altitude in 1000s of units rounded above or below Ground/Sea level (needs to be known. Easy.)

TYPES
01-PROP
02-NPC
03-THRUSTER
04-ENTITY
05-GROUND VEHICLE
06-BANDIT (AIR VEHICLE)
07-BOGEY (UFO/MISSILE)
08-SUB (UNDER GL/SL)

[quote=THREAT ASSIGNMENT MATRIX PROTOTYPE]

TYPE    Player=6
	Vehicle=5
	Entity=4
	Thruster=3
	NPC=2
	Prop=1

VEL	1000=4
	<-500=3
	>1=2
	0=1

DIST	<AOI/6=4
	AOI/6-AOI/2=3
	AOI/2-AOI=2
	>AOI=1

COND	Is Player in Flying Vehicle? = 8
	Is Flying Object? = 7
	Is Player in Ground Vehicle? = 6
	Is Armed Player? = 5
	Is (random condition, your mom) = 4
	Is Constrained Prop? = 1
	iS Dead? Multiply by 0 and delete entry
	Is Excluded Target? Multiply by 0 and delete entry

TOTAL 	Add above


EXAMPLE TGT CODE
Zombie wandering away at medium range 
"7i02j232k54334x-2923y3932z0"
TL 7
Type 02 NPC
Speed +232
Time of report=54334
Position Vector= X=2923 y=3932 z=0
[/quote]




[quote]
[b]SENSOR/TARGET FINDER[/b] "The Asset"
TTLA - Target Threat Level Analyzer
Can track up to 4 targets
Cycles every 0.5 seconds
Display entity, Dist, Vel, Pos, type and ID
Calculates Threat Level
Keep only files above TL X

-

[b]TIER 0 NODE[[/b] "The Squad"
Sequential updating
Up to 4 sensor nodes 
Up to 16 targets
8-cell Array = T0BP
Access to T1BP
]


=T0BP to T1 datalink=


[b]TIER 1 NODE[/b] "The Platoon"
T1BPI - Tier 1 Battlespace Picture Integrator[
Handles up to 4 Unit Datalinks
32-cell Array = T1BP
]

=T1BP TO T2 datalink=

[b]TIER 2 NODE[/b] "The Company"
T2BPI - Tier 2 Battlespace Picture Integrator[
As for FBPI
Handles up to 4 Formation Datalinks
Registers up to 64 targets (2 update processes)
128-cell Array = T2BP
]


=T2BP TO T3 datalink=

[b]TIER 3 NODE[/b] "The Brigade"
T3BPI - Tier 3 Battlespace Picture Integrator[
Similar to TFBPI
Handles up to 4 Tac.Force Datalinks
Registers up to 256 targets total
Sends clarified map to CMDR
512-cell Array = T3BP (Necessary? Could it be in 4 parts?)]
-
[b]T3BPA - Tier 3 Battlespace Picture Analyzer[[/b]
Keeps T2BP's separate
Re-calculates Threat Levels with AOR of the Tier 2 nodes
#Classifies threats and deletes non-threats
Defines 'global' threats that require the attention of the 4 TF's
Define and file 'shared-interest' targets that are on the border of two node's areas
[/quote]


Now the primary goal was to make a working Target Threat Level Analyzer and Tier 0 node. The higher nodes, disregarding the T3BPA; aren't complicated to code in the way that it is basically the same as a Tier0 Node but that can handle more targets. Yes, i might as well expand it so it can handle 8 targets per Targetfinder; wich basically amounts to double the code. But once that's done well you can multiply those target capacities by two.
Here is how the thing works 'in plain language'.

Let's say you want four sensors around your secret base or whatever. You spawn those 4 sensors, each with the right settings.
To each of them you spawn a TTLA chip that you wirelink to the finder; you set up a switch or something for On/Off.
Now, you spawn the Node that will tie them together. You wire each of the "ST(number)" (ST=Situation Table) inputs on the Node to their
respective "ST" outputs of the TTLA's. 
Spawn a timer to activate the Node 0 at the delay you're comfortable with, and voila! You have your own sensor net.

If you use enough sensors, you can painlessly cover the whole map and have a god's eye view of everything that is happening.


If you're interested in the goods, PM me and i will send you the e2.