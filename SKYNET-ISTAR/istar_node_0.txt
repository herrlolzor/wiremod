@name istar node 0
@inputs Go ST1:table ST2:table ST3:table ST4:table
@outputs Run N0bp:table Nn #X NY Lstr:string Clean Count Find
@persist N0bp:table NotTL:table NotID:table OT:table Run Count Clean C
@trigger Go
if (Run==1 | Clean==1) {I=10}
else {I=250}
interval(I)
#[
4^2=16

]#
Id1=ST1[1,table]
Id2=ST2[1,table]
Id3=ST3[1,table]
Id4=ST4[1,table]

Tl1=ST1[2,table]
Tl2=ST2[2,table]
Tl3=ST3[2,table]
Tl4=ST4[2,table]

if (Go==1) {
	#this is my really bad version of T=table:(),T:add(T2), whom for some reason unknown was NOT WORKING.
    NotID[1,number]=Id1[1,number]
    NotID[2,number]=Id1[2,number]
    NotID[3,number]=Id1[3,number]
    NotID[4,number]=Id1[4,number]
    NotID[5,number]=Id2[1,number]
    NotID[6,number]=Id2[2,number]
    NotID[7,number]=Id2[3,number]
    NotID[8,number]=Id2[4,number]
    NotID[9,number]=Id3[1,number]
    NotID[10,number]=Id3[2,number]
    NotID[11,number]=Id3[3,number]
    NotID[12,number]=Id3[4,number]
    NotID[13,number]=Id4[1,number]
    NotID[14,number]=Id4[2,number]
    NotID[15,number]=Id4[3,number]
    NotID[16,number]=Id4[4,number]
    
    NotTL[1,number]=Tl1[1,number]
    NotTL[2,number]=Tl1[2,number]
    NotTL[3,number]=Tl1[3,number]
    NotTL[4,number]=Tl1[4,number]
    NotTL[5,number]=Tl2[1,number]
    NotTL[6,number]=Tl2[2,number]
    NotTL[7,number]=Tl2[3,number]
    NotTL[8,number]=Tl2[4,number]
    NotTL[9,number]=Tl3[1,number]
    NotTL[10,number]=Tl3[2,number]
    NotTL[11,number]=Tl3[3,number]
    NotTL[12,number]=Tl3[4,number]
    NotTL[13,number]=Tl4[1,number]
    NotTL[14,number]=Tl4[2,number]
    NotTL[15,number]=Tl4[3,number]
    NotTL[16,number]=Tl4[4,number]
    Run=1
    N0bp=table()
    C=1}
    
if (Run==1) {Lstr=N0bp:toString()
    X=NotTL:maxIndex()
    NY=NotID[X,number]
    Y=toString(NY)
    E=entity((NotID[X,number]))
    #
    Xstr="K"+Y+"X"
    Find=Lstr:find(Xstr)
    
    if (Find==0 & NY!=0) {
    X1=toString(NotTL[X,number])
    X2=Y
    Xa=round((E:pos():x()))
    X3=toString(Xa)
    Xb=round((E:pos():y()))
    X4=toString(Xb)
    Xc=round((E:pos():z()))
    X5=toString(Xc)
    Str=X1+"K"+X2+"X"+X3+"Y"+X4+"Z"+X5
    N0bp[C,string]=Str
    C=C+1
    }
    NotTL[X,number]=0
    NotID[X,number]=0
    Count=Count+1
    if (Count>16) {Run=0
        Clean=1
        Count=0
        C=1}
    
}
if (Clean==1) {Nn=N0bp:count()
    if (Nn>8) {N0bp:pop()}
    else {Clean=0}
}

