@name negcomp3
@inputs Clk Prog Enter Mem:array Reset 
@outputs Done ProgramDone PAddr OutA OutB Mem:array Error
@outputs Command PrevOp Argument Argument2 
#Arg Arg2 Out X Y AddrRead AddrRead2 AddrWrite
@persist Command Arg Arg2 PAddr PrevOp LPP Sub SubC SubD 
@persist ProgramDone Output:array Done Error WrClk WrAddr WrData
#Int InstC InstL
@trigger Clk Reset Enter Install
#computer on a chip
#NEED REWORK JUMP
#Jumpaddr=Paddr+Plen+JAddr
#version: stored program, offboard mem
Code=742617000027

if (Reset==1) {PAddr=Done=Command=Arg=Arg2=ProgramDone=Argument=Argument2=0}
if (Enter==1) {PAddr=Prog
    Newprog=1
    ProgramDone=0
    Done=0}

if (Clk==1 & ProgramDone==0) {
    if (WrClk==1) {WrClk=0
    WrAddr=0
    WrData=0}
    if (Done==1) {Done=0}
if (Sub==1) {
    Command=Mem[SubC,number]
    Arg=Mem[SubC+1,number]
    Arg2=Mem[SubC+2,number]
    }
else {
    if (Newprog==0) {
        Command=Mem[PAddr,number]
        Arg=Mem[PAddr+1,number]
        Arg2=Mem[PAddr+2,number]
        }
    else {Command=Mem[PAddr,number]
        Arg=Mem[PAddr+1,number]
        Arg2=Mem[PAddr+2,number]
        Newprog=0
        }
}


if (Command!=0 & Command!=1 & Command!=11 & Command!=16 & Command!=21 & Command!=20 & Command!=21 & Command!=22 & Command!=23 & Command!=25 & Command!=28) {
    if (Command!=10) {ALUOn=1}
    #arg1
    if (Arg>Code) { #Memory Call
    AddrRead=Arg-Code
    Argument=Mem[AddrRead,number]}
    elseif (Arg==Code) {Argument=PrevOp} #Last Op Call
    else {Argument=Arg #Normal Argument
        }
    
    #arg2
    if (Arg2>Code) {    #Memory Call
    AddrRead2=Arg2-Code
    Argument2=Mem[AddrRead2,number]}
    elseif (Arg2==Code) {Argument2=PrevOp}   #Last Op Call
    else {Argument2=Arg2    #Normal Argument
        }
    if (Command==16) {Sub=1
    LPP=PAddr+3
    SubC=Argument*3
    Command=Mem[SubC,number]
    Arg=Mem[SubC+1,number]
    Arg2=Mem[SubC+2,number]
    }
}
elseif (PAddr!=0) {ALUOn=0
    if (Command==1) {   #Set Command
        if (Arg2==Code) {Argument2=PrevOp}
        elseif (Arg2>Code) {    #Memory Call
        AddrRead=Arg2-Code
        Argument2=Mem[AddrRead,number]}
        else {Argument2=Arg2}
        
        WrAddr=Arg
        WrData=Argument2
        PrevOp=Argument2
        Mem[WrAddr,number]=WrData
        }
        
    elseif (Command==23) { #Set2lop
        if (Arg>Code) {WrAddr=Arg-Code}
        else {WrAddr=Arg}
        WrData=PrevOp
        Mem[WrAddr,number]=WrData
        }
        
    elseif (Command==28) { #Install
        ProgramDone=1
        exit()}
    
    elseif (Command==25) { #Clear
        if (Arg>Code) {WrAddr=Arg-Code}
        else {WrAddr=Arg}
        WrData=0
        WrClk=1}
        
    elseif (Command==22) {
        if (Arg2==Code) {Argument2=PrevOp}
        elseif (Arg2>Code) {    #Memory Call
        AddrRead=Arg2-Code
        Argument2=Mem[AddrRead,number]}
        else {Argument2=Arg2}
        Output[Arg,number]=Argument2}
        
    elseif (Command==11 & Sub==0) {ProgramDone=1  #End
        exit()}
        
    elseif (Command==11 & Sub==1) {Sub=0
        PAddr=Mem[LPP,number] #indirect
        SubD=PrevOp
        exit()}
        
    elseif (Command==10) {
        if (Arg2==Code) {Argument2=PrevOp}
        elseif (Arg2>Code) {    #Memory Call
        AddrRead=Arg2-Code
        Argument2=Mem[AddrRead,number]}
        else {Argument2=Arg2}
        }
    else {WrClk=0 
        WrAddr=0  
    WrData=0}
    Done=1
}

if ((Command==10 & Arg>=1) | Command==20) {ALUOn=0
    if (Command==10) {PAddr=Argument2}
    else {PAddr=Argument2}
    Done=1
    exit()
    }
elseif (Command==10 & Argument<=0) {ALUOn=0
Done=1}
    
if (ALUOn==1) {
    if (Argument==Code) {Argument=PrevOp} #Last Op Call
    elseif (Argument>Code) { #Memory Call
    AddrRead=Argument-Code
    Argument=Mem[AddrRead,number]}
    
    #arg2
    if (Argument2==Code) {Argument2=PrevOp}   #Last Op Call
    elseif (Argument2>Code) {    #Memory Call
    AddrRead2=Argument2-Code
    Argument2=Mem[AddrRead2,number]}
    
    X=Argument
    Y=Argument2

    if (Command==2) {Out=X+Y
       PrevOp=Out
        Done=1}
        
    elseif (Command==3) {Out=X-Y
       PrevOp=Out
        Done=1}
        
    elseif (Command==4) {
    if (X==Y) {Out=1
       PrevOp=1
            Done=1}
    else {Out=0
       PrevOp=0
            Done=1}
            }
            
    elseif (Command==5) {
    if (X>=Y) {Out=1
       PrevOp=1
        Done=1}
    else {Out=0
       PrevOp=0
        Done=1}
    }
    
    elseif (Command==6) {
    if (X<=Y) {Out=1
       PrevOp=1
        Done=1}
    else {Out=0
       PrevOp=0
        Done=1}
    }
    
    elseif (Command==7) {
    if (X==1 & Y==1) {Out=1
       PrevOp=1
        Done=1}
    else {Out=0
       PrevOp=0
        Done=1}
    }
    
    elseif (Command==8) {
    if (X==1 | Y==1) {Out=1
       PrevOp=1
        Done=1}
    else {Out=0 
       PrevOp=0   
        Done=1}
    }
    
    elseif (Command==9) {
    if (X==0 & Y==0) {Out=1
       PrevOp=1
        Done=1}
    else {Out=0  
       PrevOp=0  
        Done=1}
    }
    
    elseif (Command==12) {
       Out=X*Y
       PrevOp=Out
        Done=1
    }

    elseif (Command==13) {
       Out=X/Y
       PrevOp=Out
        Done=1
    }

    elseif (Command==14) {
       Out=(X^Y)
       PrevOp=Out
        Done=1
    }

    elseif (Command==15) {
       Out=sqrt(X)
       PrevOp=Out
        Done=1
    }

    elseif (Command==17) {
       Out=cos(X)
       PrevOp=Out
        Done=1
    }
    elseif (Command==18) {
       Out=sin(X)
       PrevOp=Out
        Done=1
    }
    
    elseif (Command==19) {
    if (X!=Y) {Out=1
       PrevOp=1
        Done=1}
    else {Out=0  
       PrevOp=0  
        Done=1}
    }
    
    elseif (Command==26) {
    if (X>Y) {Out=1
       PrevOp=1
        Done=1}
    else {Out=0
       PrevOp=0
        Done=1}
    }
    
    elseif (Command==27) {
    if (X<Y) {Out=1
       PrevOp=1
        Done=1}
    else {Out=0
       PrevOp=0
        Done=1}
    }
}
OutA=Output[1,number]
OutB=Output[2,number]

if (Done==0) {Done=1}
if (Clk==1 & PAddr>=1 & Done==1 & ProgramDone==0) {
    if (Sub==1) {SubC=SubC+3}
    else {PAddr=PAddr+3}
}

}
