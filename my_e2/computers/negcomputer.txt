@name NEGCOMPUTER CONCEPT FILE
NOT E2 CODE
##############
###COMMANDS###
SET [X=Y]--------------1
ADD [X+Y]==============2
SBT [X-Y]--------------3
EQL [X==Y]=============4
LSEQL [X<=Y]-----------5
MREQL [X>=Y]===========6
AND [X&Y]--------------7
OR [X | Y]=============8
NND [!X & !]Y----------9
IFGO [if X==1 goto Y]==10
END -------------------11
MUL [X*Y] =============12
DIV [X/Y] -------------13
POW [X^Y] =============14
SQRT [X] --------------15
RUN [X]================16
COS [X]----------------17
SIN [X]================18
NOT [!X]---------------19
GO [X]=================20

OUT [X,Y]==============22 Set Output X to Data Y
SET2LOP [X]------------23

CLR [X]----------------25
MRTN [X>Y]=============26
LSTN [X<Y]-------------27
IN [X]----------------21 Input X to Addr Y
===
#
#PRNT [X,Y]============24 Print X on line Y of Console screen
#INSTL [X,Y]===========28 Install to X, Length Y
#SETPRO[X=Y]-----------29 Set Program in Addr Y as Program #X in List
#PRO [X]===============30 Run Program #X


#NEW CMD IDEAS
Tan, acos, asin, atan, nor, xor
INDIRECT GOTO to another location, while saving the location of the next instruction as a point to return to (a call)
Goto if zero



================
#TECHNICAL#

ASSEMBLER
Try... in PYTHON :O

MEM10 = 742617000037
REGA  = 742617000028
REGB  = 742617000029

===

ERROR DETECTS
0-No Errors
1-Invalid Operand
2-Invalid Operator
3-Division by Zero
4-Numeric Overflow
5-

====
MULTI-PROCESSING


Tick Counter
On Tick quota, switch programs if others exist
save data of prog

persist=Pnum,TickC
ProgramAddr=array()

PresProgAddr=ProgramAddr[Pnum]
if TickC > TickMax : 
	if ProgramAddr[Pnum+1] > 0 : 
		Pnum=Pnum+1
		TickC=0
		ProgAddr=ProgramAddr[Pnum]
		ProgRestore[1]=Lop
		
	else: Pnum=1

===
VIRTUALIZED MEMORY

'Named'registers




New write commands
WRRAM = Write to RAM (Program mem)
WRMEM = Write to Memory (Fixed addr)

REAL MEM
1-26 Registers
27-90 RAM - 32*array(8)
91-154 ROM - 32*array(8)
155+ MEM - DHDD

VIRTUAL MEM
Registers A to Z
RAM = 1-256
ROM = 257-512
MEM = 1-infinity

PROGRAM MEM
(MemPR[Addr])MemP[pnum]

====
INTERRUPTS
Example:
Prog1 asks for input
while i type, it runs Prog2,3,4,ect
when i press enter, progN interrupts
Prog1 resumes

====
PLANS

Plug-in devices
Software library
Interrupt detections
Idle mode
Write Protection (EPROM)
Program List
Overflow Detection
User Interrupts
Time-Sharing System/Multi-tasking
Command Prompt Shell
Digital Screen
String Memory (1 instruction per memory cell)
String Data support
True Operating System
Simple Game
Disk Management
Multiprocessing


====
IDEAS

INSTRUCTION SET
Assembler turns "ADD 25.50 MEM25 MEM25
	into
String(Int,%Z%,Command, "%A%",ArgType1,%B%,DataType1,%C%,Arg1,"%D%",ArgType2,%E%,DataType2,%F%, Arg2,"%G%",Mem)
ADD 25.50 TO MEM 25 = 1%2%1%25.50%2%1%25%25
ArgType=variable, mem=1 addr=2
DataType=number=1,string=2,vector=3
Mem= Mem addr to save result in
Int=Interrupt flag



====

S- Start OS (Fixed Addr)
E- Exec Prog Disk
B- Boot Subroutine
L- List 12 Addrs
W- Write Directly


=============
NEGOS 0.1
=============
print" "
print("NEGGA-OS 0.1 RUNNING"
print" "
print"ENTER PROGRAM TO RUN"
print"ENTER ZERO TO EXIT"
INPUT NUM ADDR -- WAIT
SET ADDR 0 = LOP
ADDR 0 == 0
IF TRUE GOTO END
RUN ADDR[ADDR0]
GO TO 3
END
