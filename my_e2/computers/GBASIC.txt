@name GBASIC

http://steamcommunity.com/id/lolzorus/screenshot/596944795877188615
G-FORTRAN
G-OLDSCHOOL COMPUTER

# COMMAND-ARG-ARG




###Current Version: 0.35
Array Input/Output
Dual Last Op
Array memory
Console Screen Output

[NUMBER SYSTEM
Real Numbers: -INF to 742617000026 
742617000027: Last Op, UNCHANGING
742617000028 and Up: Memory]
Normal memory addressing for Cmd 1 (Addr1 is 1 not 742617000028)]


####LIST OF IMPLEMENTED COMMANDS #####
#SET [X=Y]--------------1
#ADD [X+Y]==============2
#SBT [X-Y]--------------3
#EQL [X==Y]=============4
#LSEQL [X<=Y]-----------5
#MREQL [X>=Y]===========6
#AND [X&Y]--------------7
#OR [X | Y]=============8
#NND [!X & !]Y----------9
#IFGO [if X==1 goto Y]==10
#END -------------------11
#MULT [X*Y] ============12
#DIVI [X/Y] ------------13
#SQUARE [X] ============14
#SQRT [X] --------------15
#RUN [X]================16 
#COS [X]----------------17
#SIN [X]================18
#NOT [!X]---------------19
#GO [X]=================20
#INPUT [X]--------------21 [Wait for Input counter Clk, Op result is Input]
#OUPUT [X,Y]============22 [Set Output X to Data Y]
#SETLOP [X]-------------23
#EXP [X^Y]==============24
#CLR [X]----------------25
#MRTN [X>Y]=============26
#LSTN [X<Y]-------------27

###

#INSTL [X,Y] X is Address of Memory to install program in, Y is length of program
#SUB [X] Goto Subroutine Program with Subroutine Addr X, Op result is Addr content
#LOAD [X] gets number as opcode for EXEC
#EXEC [X,Y] Puts controller in subroutine mode: LOP=Command, X=Arg, Y=Arg2
#GET [X] Gets value from memory X as Op result, Arg=Addr[(Addr[X,number]]
#WRPR [X,Y] Sets Address X Write Protection On/Off, Y is 1/true 0/false
#SETPRO[X=Y] Set Program in Addr Y as Program #X in List
#PRO [X] Run Program #X



##0.4 Major Update
742617000028 to 742617000054: Register A to Z
742617000055 to 742617999999: Undefined, Could be System Directory and Write-Protected
Addr 0 = 742618000000
Addr 1 = 742618000001
Addr 2 = 742618000002
ect]


#SETREG [X] Set Register to x
#WAIT [X] X cycles
#PAUSE&GO [X]


Operation Value Register (Accumulator) x26
Idle mode
Array program input
Oscilloscope Support
I/O ports
Card Writing




##0.5 Major Overhaul
#INSTL [X,Y] X is Address of Memory to install program in, Y is length of program
#SUB [X] Goto Subroutine Program with Subroutine Addr X, Op result is Addr content
#LOAD [X] gets number as opcode for EXEC
#EXEC [X,Y] Puts controller in subroutine mode: LOP=Command, X=Arg, Y=Arg2
#GET [X] Gets value from memory X as Op result, Arg=Addr[(Addr[X,number]]
#WRPR [X,Y] Sets Address X Write Protection On/Off, Y is 1/true 0/false
#SETPRO[X=Y] Set Program in Addr Y as Program #X in List
#PRO [X] Run Program #X

Redesigned Controller
CPU gets command from Controller
Persistant Memory
Overflow Detection
Error Detection Interrupts
Subroutines and STORED PROGRAMS
Instruction Register
Write Protection (EPROM)
Program List

[STORED PROGRAMS aka SUBROUTINES
"SYSTEM PROGRAMS"{
@MOVE [X TO Y] (Set X to Y and X to 0)
@CHKFREE [X,Y] Checks from X to Y for all 0's, true or false
@CHKDSK [X,Y] Return all empty addresses from X to X+Y
@DEL [X,Y] Clear all addresses from X to Y
@SUB [X], Op result is X; Fetch next instruction or Subroutine within a subroutine
@LIST[X,Y] List contents of Addr X to Y on Screen
}

====Program Storage====
Built-In Instruction Length Knowledge
NO gaps between instructions
Example of stored program [n x] = memory cell
[1 Op][2 Arg][3 Arg2][4 Op][5 Arg][6 Op][7 Arg][8 Arg2][9 Op][10 Arg][11 Op]

11 Memory cells
5 Ops total
2 2arg Ops
2 1arg Ops
1 0arg Op

How it works
Input or Program instruction: Subroutine(Address of Program (dont forget it...))

Installing a program:
	1. CHKFREE [X,Y] X is Address to begin, Y is length of program
	2. if not free, change addr or Delete
	3. Insert program
	3. INSTL [X,Y]:
		X+Y = End
		while Counter <= End
			Word=Program[Counter] (If word is Lop, Word will be LOP Code and not Last Operation)
			Mem[X+Counter]=Word
			Counter=Counter+1		
		Finish Signal
	

SUBROUTINE MODE:
	Controller - subroutine mode:
	1. Pause program reading
	2. Advance program one position
	3. Execute Subroutine Command(s)
	4. At Subroutine End Resume normal operating mode


Ex: 	
	1. Sub [n]
	---subroutine mode---
	2. Pause CPU
	3. -Load[n]=n'
	4. Cmd n' = X length (Hardwired knowledge of Op Length to skip to right next Addr)
	5. if X == 1 :
		Inst: Mem[n']
		6. -Inst[0,0]
	5. elif X==2 :
		Inst: Mem[n'], Mem[n'+1]
		6. -Exec[Inst[n'+1']]
	5. elif X==3 :
		Inst: Mem[n'], Mem[n'+1], Mem[n'+2]
		6. -Exec[Inst[n'+1, n'+2]]

	6. [Exec Prep
		6.1. Set InstReg to Inst[1]
		6.2. Set ArgReg to Inst[2]
		6.3. Set Arg2Reg to Inst[3]
	7. Unpause, -EXEC [n'+1, ect] Instruction execution


	8. if Inst == 11 : End Subroutine Mode
		9. InstReg, ArgReg and Arg2Reg cleared
		10. Normal Program is resumed
	8. else : 
		9. Sub [n+X] Go to Addr n+X for next Instruction, cycle repeats


#0.6 Undefined
		
### FUTURE GOALS
User Interrupts
Time-Sharing System/Multi-tasking
Command Prompt Shell
Digital Screen
String Memory (1 instruction per memory cell)
String Data support
True Operating System
Simple Game
Disk Management
True Synchronization
String Programming Language to Machine Code Compiler
Multiprocessor
High-level Language
Vector Processing
12gb of RAM
Crossfire SLI
Running Gmod IN Gmod. Gmod^2.

==Architecture Lab==
















Oshit, variable lenght instructions

3 Solutions
1. Put Op length before each Command (above Prg: 16 cells)
[1 3][2 Op][3 Arg][4 Arg2][5 2][6 Op][7 Arg][8 3][9 Op][10 Arg][11 Arg2][12 2][13 Op][14 Arg][15 1][16 Op]
	Sub [n]
		Read n,
		Counter= n-Counter

2. No spaces, hardwired knowledge

3. 1 instruction per memory cell (string/vector) 
